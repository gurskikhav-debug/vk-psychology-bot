import os
import json
import requests
from datetime import datetime, timedelta
from deep_translator import GoogleTranslator
import feedparser

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TOKEN = os.getenv("TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

# --- –ö–µ—à ---
CACHE_FILE = "cache/psych_cache.json"

def load_cache():
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return set(data) if isinstance(data, list) else set()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞: {e}")
    return set()

def save_cache(cache_set):
    os.makedirs("cache", exist_ok=True)
    with open(CACHE_FILE, "w", encoding="utf-8") as f:
        json.dump(list(cache_set), f, ensure_ascii=False, indent=2)

# --- –ü–µ—Ä–µ–≤–æ–¥ ---
def translate_text(text):
    try:
        return GoogleTranslator(source='auto', target='ru').translate(text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

# --- RSS-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ ---
RSS_FEEDS = [
    {
        "url": "https://habr.com/ru/rss/search/?q=–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è&target_type=posts&order=date",
        "name": "Habr: –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è"
    },
    {
        "url": "https://nplus1.ru/rss",
        "name": "N+1: –ù–∞—É–∫–∞"
    },
    {
        "url": "https://tjournal.ru/rss",
        "name": "TJournal: –°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ"
    },
    {
        "url": "https://www.reddit.com/r/Psychology.rss",
        "name": "Reddit: Psychology"
    },
    {
        "url": "https://www.psychologytoday.com/us/blog/the-athletes-way/rss2.xml",
        "name": "Psychology Today"
    }
]

# --- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ ---
KEYWORDS = [
    '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Ç–µ—Ä–∞–ø–∏—è', '–º–æ—Ç–∏–≤–∞—Ü–∏—è', '—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ', '—Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å',
    '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å', '–∫–æ—É—á', '–ø—Å–∏—Ö–æ–ª–æ–≥', 'mental health',
    'therapy', 'mindfulness', 'self-improvement', 'anxiety', 'depression'
]

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ---
def send_message(chat_id, text, parse_mode='Markdown', disable_preview=False):
    if not chat_id:
        print("‚ùå chat_id –Ω–µ –∑–∞–¥–∞–Ω")
        return
    try:
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        data = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": parse_mode,
            "disable_web_page_preview": not disable_preview
        }
        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}, {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

# --- –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π ---
def search_articles():
    articles = []
    from_date = datetime.now() - timedelta(days=3)

    for feed in RSS_FEEDS:
        try:
            parsed = feedparser.parse(feed["url"])
            for entry in parsed.entries:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
                published = entry.get('published_parsed') or entry.get('updated_parsed')
                if published:
                    pub_date = datetime(*published[:6])
                    if pub_date < from_date:
                        continue

                title = entry.get('title', '').lower()
                summary = entry.get('summary', '').lower()

                # –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
                if any(kw.lower() in title or kw.lower() in summary for kw in KEYWORDS):
                    articles.append({
                        'title': entry.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                        'url': entry.get('link'),
                        'source': feed["name"]
                    })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ RSS {feed['name']}: {e}")

    return articles

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (—Ä–µ–∂–∏–º GitHub Actions)")
    try:
        seen_urls = load_cache()
        raw_articles = search_articles()
        print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: {len(raw_articles)}")

        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥—É–±–ª–∏
        new_articles = [a for a in raw_articles if a.get('url') not in seen_urls]

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20 –Ω–æ–≤–æ—Å—Ç—è–º–∏
        selected = new_articles[:20]
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {len(selected)} –Ω–æ–≤–æ—Å—Ç–µ–π")

        # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞ ---
        logic_msg = "üîç *–õ–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞:*\n\n"
        logic_msg += "–ë–æ—Ç –∏—â–µ—Ç –ø–æ—Å—Ç—ã –∏ —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–µ:\n"
        logic_msg += "‚Ä¢ –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è\n"
        logic_msg += "‚Ä¢ –¢–µ—Ä–∞–ø–∏—è –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ\n"
        logic_msg += "‚Ä¢ –ú–æ—Ç–∏–≤–∞—Ü–∏—è –∏ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å\n"
        logic_msg += "‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: Habr, N+1, Reddit, Psychology Today\n"
        logic_msg += "‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è\n"
        logic_msg += "‚Ä¢ –ë–µ–∑ –¥—É–±–ª–µ–π ‚Äî —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–µ—à–∞\n"

        if ADMIN_ID:
            try:
                admin_id_int = int(ADMIN_ID)
                send_message(admin_id_int, logic_msg, disable_preview=True)
            except ValueError:
                print(f"‚ùå ADMIN_ID '{ADMIN_ID}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")

        # --- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ ---
        if selected:
            batch_size = 5
            msg = "üì¨ *–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏*\n\n"
            for i, art in enumerate(selected, 1):
                title_ru = translate_text(art['title'])
                source = art.get('source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                msg += f"üìå *{title_ru}*\nüåê {source}\nüîó {art['url']}\n\n"

                if i % batch_size == 0 or i == len(selected):
                    if ADMIN_ID:
                        try:
                            admin_id_int = int(ADMIN_ID)
                            send_message(admin_id_int, msg, disable_preview=False)
                        except ValueError:
                            print(f"‚ùå ADMIN_ID '{ADMIN_ID}' –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º")
                    msg = ""
                    if i != len(selected):
                        msg = "\n"

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
            for art in selected:
                url = art.get('url')
                if url:
                    seen_urls.add(url)
            save_cache(seen_urls)

        else:
            # –î–∞–∂–µ –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç
            if ADMIN_ID:
                no_news_msg = "üì≠ *–ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç.*\n"
                no_news_msg += "–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∏—Å–∫ ‚Äî –∑–∞–≤—Ç—Ä–∞ –≤ 18:00."
                send_message(int(ADMIN_ID), no_news_msg, disable_preview=False)

        print("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    except Exception as e:
        error_msg = f"{type(e).__name__}: {str(e)[:500]}"
        print(f"üî¥ –û—à–∏–±–∫–∞: {error_msg}")
        if ADMIN_ID and TOKEN:
            send_message(ADMIN_ID, f"‚ùå –û—à–∏–±–∫–∞: `{error_msg}`")

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    main()